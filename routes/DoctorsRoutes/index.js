const router = require("express").Router()
const { uploadManager } = require("../../modules/storage/cloudinary")
const { validate } = require("../../validations/validate");
const { tokenVerifier } = require("../../utils")
const { registerValidation, loginValidation   } = require("../../validations/doctors/doctor");
const { doctorPostValidation } = require("../../validations/doctors/doctorPost")
const { doctorLikePostValidation } = require("../../validations/doctors/doctorLikePost")
const { doctorCommentReplyValidation } = require("../../validations/doctors/doctorcommentreply")
const { commentDoctorValidation , reportPostDoctorValidation } = require("../../validations/doctors/comment")
const { sharePostDoctorValidation } = require("../../validations/doctors/doctorshare")
const { profileValidation } = require("../../validations/doctors/updateDoctorProfile")
const { consultationValidation } = require("../../validations/doctors/consultation")
const { checkSchema } = require("express-validator")

//Controller here
const { registerDoctorController, forgotDoctorPasswordController,validateCodeController, forgotPasswordCodeController,  updateDoctorAvailabilityController, setDoctorAvailabilityController, createAvailabilityController ,deleteDoctorAvailabilityController } = require("../../controllers/doctorController/doctorController")
const {  doctorLoginController } = require("../../controllers/doctorController/loginController")
const { getPostByParamController, updatePostController,changePostStatusController, deletePostByParamController } = require('../../controllers/centralController/postController')
const { createPostCommentController, createPostCommentReplyController,createPostCommentLikeController, createReportPostController, createPostCommentUnliikeController, createPostCommentReplyLikeController, createPostCommentReplyUnlikeController } = require("../../controllers/centralController/commentController")
const {sendChatMessageController, receiveChatMessageController} = require("../../controllers/doctorController/sendChatMessageController")
const {getDoctorByParamController} = require("../../controllers/doctorController/getDoctorByParamController")
const { createDoctorPostController, createPostLikedController,createSharePostController } = require("../../controllers/doctorController/doctorPostController")
const { getTagsByParamsController, getFilterByPopularController, getUnansweredPostController, getTagByParamController } = require('../../controllers/centralController/tagController')
const { searchPostByTitleController } = require("../../controllers/doctorController/searchPostByTitleController")
const { analyticsController } = require("../../controllers/centralController/analyticsController")
const { getSavedPostByIdController, getPostFeedController, getTopContributorController } =require("../../controllers/centralController/getSavedPostByIdController")
const { updateDoctorProfileController, updateDoctorPasswordController, updateMedicalLicenseController, updateValidCardController, searchDoctorByIdController } = require("../../controllers/doctorController/doctorProfileSettingController")
const { createChatRoomController, getChatRequestController  } = require("../../controllers/centralController/createChatRoomController")
const { createBookingAcceptController, createBookingRejecttController, getDoctorUpcomingBookingController, getDoctorPendingBookingController } = require("../../controllers/doctorController/doctorBookingController")
const { createPostConsultationController, getPostConsultationHistoryController } = require("../../controllers/doctorController/postConsultationFormController")
const { sendNotificationMessageController , getPaymentHistoryNotificationController , getEarningHistoryNotificationController} = require("../../controllers/centralController/notificationController")
const { createBookingRescheduleController } = require('../../controllers/centralController/createBookingRescheduleController')
const { createNotificationSettingController, getNotificationSettingByParamsController, deleteNotificationSettingController} = require("../../controllers/centralController/notificationSettingController")
const { createPaystackPaymentController } = require("../../controllers/paymentController/paymentController")
const { getPointController, awardBadgeController } = require("../../controllers/doctorController/jojoloPointController")
const { getBadgeNotificationController, updateBadgeNotificationController } = require("../../controllers/centralController/badgeNotificationController")
const { updateChatRequestController, getPendingChatRequestController } = require("../../controllers/doctorController/updateChatRequestController")
const {createBankAccountController, getBankAccountController, updateBankAccountController, deleteBankAccountController } = require("../../controllers/centralController/createBankAccountController")
const { getDoctorEarningController, getDoctorTypeOfServiceController} = require("../../controllers/doctorController/earningController")
const { getTransactionController } = require("../../controllers/centralController/walletController")

//route here
router.post("/register-doctor", uploadManager("DoctorMedia").single("doctorImage"), validate(checkSchema(registerValidation)), registerDoctorController)
router.post("/login-doctor",  doctorLoginController  )
router.post("/code-input", forgotPasswordCodeController )
router.post("/verify-code", validateCodeController )
router.put("/doctor/forgot-password/:doctorId", forgotDoctorPasswordController )
router.put('/profile/:doctorId', uploadManager("DoctorMedia").single("profileImage"), validate(checkSchema(profileValidation)), updateDoctorProfileController)
router.put('/profile-medical-license/:doctorId', uploadManager("DoctorMedia").single("profileImage"), updateMedicalLicenseController)
router.put('/profile-valid-card/:doctorId', uploadManager("DoctorMedia").single("cardImage"), updateValidCardController)
router.put("/doctor-profile-updatepassword/:doctorId", updateDoctorPasswordController  )
router.post('/doctor-post', uploadManager("PostMedia").array("postImage", 7),  createDoctorPostController)
router.get('/posts', getPostByParamController)
router.put('/post/:doctorId/:postId', uploadManager("PostMedia").array('postImage', 7), validate(checkSchema(doctorPostValidation)), updatePostController)
router.delete("/post/:doctorId/:postId", tokenVerifier, deletePostByParamController)
router.post('/post-like', validate(checkSchema(doctorLikePostValidation)),  createPostLikedController)
router.post('/comment-post', validate(checkSchema(commentDoctorValidation)), createPostCommentController) 
router.post('/comment-reply', tokenVerifier, validate(checkSchema(doctorCommentReplyValidation)), createPostCommentReplyController) 
router.post('/share-post', validate(checkSchema(sharePostDoctorValidation)), createSharePostController) 
router.post('/report-post', validate(checkSchema(reportPostDoctorValidation)), createReportPostController)
router.get("/tags/:doctorId", tokenVerifier, getTagsByParamsController)
router.get("/search-tags/:doctorId", tokenVerifier, searchPostByTitleController)
router.get("/analytics/:doctorId",tokenVerifier, analyticsController)
router.post("/send-chat", tokenVerifier, sendChatMessageController)
router.get("/receive-chat", tokenVerifier, receiveChatMessageController)
router.get("/chats", tokenVerifier, receiveChatMessageController)
router.get("/doctor",tokenVerifier, getDoctorByParamController)
router.get("/saved-post/:doctorId", tokenVerifier, getSavedPostByIdController)
router.post("/create-chat-rooms", tokenVerifier, createChatRoomController)
router.get("/chat-request", tokenVerifier, getChatRequestController)
router.put("/:doctorId/availability", tokenVerifier, updateDoctorAvailabilityController)
router.delete("/:availabilityId", tokenVerifier, deleteDoctorAvailabilityController)
router.get("/feed-post/:doctorId", tokenVerifier, getPostFeedController)
router.post("/accept-booking-request", tokenVerifier, createBookingAcceptController )
router.post("/reject-booking-request", tokenVerifier, createBookingRejecttController )
router.get("/doctor-bookings", tokenVerifier, getDoctorUpcomingBookingController)
router.get("/pending-request", tokenVerifier, getDoctorPendingBookingController)
router.post('/consultation-form', validate(checkSchema(consultationValidation)), createPostConsultationController) 
router.get("/consultation-history", tokenVerifier, getPostConsultationHistoryController)
router.post("/send-notification", tokenVerifier, sendNotificationMessageController)
router.get("/filter-popular", tokenVerifier, getFilterByPopularController)
router.get("/unanswered-posts",tokenVerifier,  getUnansweredPostController)
router.put("/change-post-status/:postId", tokenVerifier, changePostStatusController)
router.put("/reschedule-booking", tokenVerifier, createBookingRescheduleController)
router.post("/create-notification-setting", tokenVerifier, createNotificationSettingController)
router.get("/notification-setting", tokenVerifier, getNotificationSettingByParamsController)
router.delete("/notification-setting/:notificationSettingId", tokenVerifier, deleteNotificationSettingController)
router.put("/set-availability/:doctorId", tokenVerifier, setDoctorAvailabilityController)
router.post("/create-availability", createAvailabilityController)
router.post("/send-payment-details", tokenVerifier, createPaystackPaymentController)
router.get("/award-badge",tokenVerifier, awardBadgeController)
router.get("/points", tokenVerifier, getPointController)
router.get("/badge-history", tokenVerifier, getBadgeNotificationController)
router.put("/badge-history/:badgenotificationId", tokenVerifier, updateBadgeNotificationController)
router.get("/id",tokenVerifier, searchDoctorByIdController)
router.get('/tags', getTagByParamController)
router.get('/top-doctor', tokenVerifier, getTopContributorController)
router.post('/comment-like', tokenVerifier, createPostCommentLikeController)
router.post('/comment-unlike', tokenVerifier, createPostCommentUnliikeController)
router.post('/comment-reply-like', tokenVerifier, createPostCommentReplyLikeController)
router.post('/comment-reply-unlike', tokenVerifier, createPostCommentReplyUnlikeController)
router.put("/update-chat-request/:chatrequestId", tokenVerifier, updateChatRequestController)
router.get("/chat-request", tokenVerifier, getPendingChatRequestController)
router.post('/create-bank-account', tokenVerifier, createBankAccountController)
router.get('/bank-account/:doctorId', tokenVerifier, getBankAccountController)
router.put('/bank-account/:userId', tokenVerifier, updateBankAccountController)
router.delete('/bank-account/:userId', tokenVerifier, deleteBankAccountController)
router.get('/earnings', tokenVerifier, getDoctorEarningController)
router.get('/sort-by-service', tokenVerifier, getDoctorTypeOfServiceController)
router.get("/transaction", tokenVerifier , getTransactionController)
router.get("/payment-notice", tokenVerifier, getPaymentHistoryNotificationController)
router.get("/earnings-history", tokenVerifier, getEarningHistoryNotificationController)

module.exports = router