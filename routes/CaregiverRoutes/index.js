const router = require("express").Router()
const { uploadManager } = require("../../modules/storage/cloudinary")
const { validate } = require("../../validations/validate");
const { checkSchema } = require("express-validator")
const { postValidation } = require("../../validations/caregiver/postValidation");
const { caregiverLikePostValidation } = require("../../validations/caregiver/caregiverLikePost")
const { caregiverCommentReplyValidation } = require("../../validations/caregiver/caregivercommentreply")
const { commentCaregiverValidation, sharePostCaregiverValidation, reportPostCaregiverValidation } = require("../../validations/caregiver/caregivercomment")
const { createPostCommentLikeController, createReportPostController, createPostCommentUnliikeController } = require("../../controllers/centralController/commentController")
const { tokenVerifier, userVerifier } = require("../../utils")
const { caregiverRegisterValidation } = require("../../validations/caregiver/caregiverRegisterValidation");
const { caregiverLoginValidation } = require("../../validations/caregiver/caregiverLoginValidation");
const { profileValidation } = require("../../validations/caregiver/updateCaregiverProfile")

// controllers
const { sendChatMessageController, receiveChatMessageController } = require("../../controllers/caregiverController/sendChatMessageController")
const { caregiverCreatePostController, createPostLikedController , createPostCommentReplyController, createPostCommentController, createSharePostController} = require("../../controllers/caregiverController/postController");
const { getPostByParamController, updatePostController, changePostStatusController, deletePostByParamController, getSharedPostByParamController } = require('../../controllers/centralController/postController')
const { getTagsByParamsController, getFilterByPopularController,getUnansweredPostController, getTagByParamController } = require("../../controllers/centralController/tagController")
const { analyticsController } = require("../../controllers/centralController/analyticsController")
const { searchPostByTitleController } = require("../../controllers/caregiverController/searchPostByTitleController")
const { searchAccountController, forgotPasswordController, validateCodeController, verifyEmailController, createCaregiverController, signInController } = require("../../controllers/caregiverController/caregiverAuthController");
const { getSavedPostByIdController, getPostFeedController, getTopContributorController } = require("../../controllers/centralController/getSavedPostByIdController")
const { createCaregiverBookingController, getUpcomingDoctorEventController, updateBookingEventController, deleteBookingEventController } = require("../../controllers/caregiverController/caregiverBookingController")
const { caregiverVaccinationController , getBookedVaccinationController, updateBookedVaccinationController, deleteBookedVaccinationController } = require("../../controllers/caregiverController/caregiverVaccinationController")
const { addChildController, getChildController, updateChildController, deleteChildController } = require("../../controllers/caregiverController/caregiverAddChildController")
const { createWellnessBookingController, getUpcomingWellnessEventController, updateWellnessEventController, deleteWellnessEventController } = require("../../controllers/caregiverController/wellnessBookingController")
const { updateProfileController, updateCargiverPasswordController , searchCaregiverByIdController} = require("../../controllers/caregiverController/accountSettingsController");
const { createNotificationSettingController, getNotificationSettingByParamsController, deleteNotificationSettingController} = require("../../controllers/centralController/notificationSettingController")
const { subscribePlanController, getSubscriptionController } = require("../../controllers/caregiverController/subscribePlanController")
const { sendNotificationMessageController } = require("../../controllers/centralController/notificationController")
const { getConsultationController } = require("../../controllers/caregiverController/consultationController")
const { createBookingRescheduleController, getDoctorsListController } = require('../../controllers/centralController/createBookingRescheduleController')
const { getPointController, awardBadgeController } = require("../../controllers/caregiverController/jojoloPointController")
const { createPaystackPaymentController } = require("../../controllers/paymentController/paymentController")
const { getBadgeNotificationController, updateBadgeNotificationController } = require("../../controllers/centralController/badgeNotificationController")
const { updatePlanDurationDetailController, getDoctorLatestSubscriptionController, getPaymentController } = require("../../controllers/caregiverController/planDurationDetailController")
const { sendChatRequestController } = require("../../controllers/caregiverController/sendChatRequestController")
const { createChatRoomController, getChatRequestController  } = require("../../controllers/centralController/createChatRoomController")

// routes
router.post("/create-account", validate(checkSchema(caregiverRegisterValidation)), createCaregiverController)
router.post("/search-account", searchAccountController)
router.post("/sign-in", validate(checkSchema(caregiverLoginValidation)), signInController)
router.get("/verify-email/:caregiverId", verifyEmailController)
router.put("/forgot-password", forgotPasswordController)
router.post("/validate-code", validateCodeController)
router.post("/create-post", uploadManager("PostMedia").array("postImage", 10), validate(checkSchema(postValidation)), caregiverCreatePostController)
router.get("/posts", tokenVerifier, getPostByParamController)
router.get("/share-posts", getSharedPostByParamController)
router.put('/post/:caregiverId/:postId', uploadManager("PostMedia").array('postImage', 7), validate(checkSchema(postValidation)), updatePostController)
router.delete("/post/:caregiverId/:postId", tokenVerifier, deletePostByParamController)
router.post('/comment-post', tokenVerifier, validate(checkSchema(commentCaregiverValidation)),  createPostCommentController)
router.post('/comment-reply', tokenVerifier, validate(checkSchema(caregiverCommentReplyValidation)),  createPostCommentReplyController) 
router.post('/post-like', tokenVerifier, validate(checkSchema(caregiverLikePostValidation)), createPostLikedController)
router.post('/share-post', tokenVerifier, validate(checkSchema(sharePostCaregiverValidation)), createSharePostController)
router.post('/report-post', tokenVerifier, validate(checkSchema(reportPostCaregiverValidation)), createReportPostController)
router.get("/tags/:caregiverId", tokenVerifier, getTagsByParamsController)
router.get("/search-tags/:caregiverId", tokenVerifier, searchPostByTitleController)
router.get("/analytics/:caregiverId", tokenVerifier, analyticsController)
router.post("/send-chat", tokenVerifier, sendChatMessageController)
router.get("/receive-chat", tokenVerifier, receiveChatMessageController)
router.get("/saved-post/:caregiverId",tokenVerifier, getSavedPostByIdController)
router.post("/create-booking", tokenVerifier, createCaregiverBookingController) 
router.get("/bookings", tokenVerifier, getUpcomingDoctorEventController)
router.put("/bookings/:bookingId",tokenVerifier, updateBookingEventController)
router.delete("/bookings/:bookingId",tokenVerifier, deleteBookingEventController)
router.post("/wellness-booking", tokenVerifier, createWellnessBookingController) 
router.get("/wellness-booking", tokenVerifier, getUpcomingWellnessEventController)
router.put("/wellness-booking/:wellnessId",tokenVerifier, updateWellnessEventController)
router.delete("/wellness-booking/:caregiverId",tokenVerifier, deleteWellnessEventController)
router.post("/book-vaccination", tokenVerifier, caregiverVaccinationController)
router.get("/vaccinations", tokenVerifier, getBookedVaccinationController)
router.put("/vaccinations/:bookVaccinationId", tokenVerifier, updateBookedVaccinationController)
router.delete("/vaccinations/:bookVaccinationId", tokenVerifier, deleteBookedVaccinationController)
router.get("/feed-post/:caregiverId", tokenVerifier, getPostFeedController)
router.post("/add-child", tokenVerifier, addChildController)
router.get("/childs", tokenVerifier, getChildController)
router.put("/add-child/:childInformationId", tokenVerifier, updateChildController)
router.delete("/add-child/:childInformationId", tokenVerifier, deleteChildController)
router.post("/send-notification", tokenVerifier, sendNotificationMessageController)
router.put("/profile/:caregiverId", uploadManager("CaregiverMedia").single("profileImage"), validate(checkSchema(profileValidation)), updateProfileController)
router.put("/update-password/:caregiverId", tokenVerifier, updateCargiverPasswordController)
router.post("/create-notification-setting", tokenVerifier, createNotificationSettingController)
router.get("/notification-setting", tokenVerifier, getNotificationSettingByParamsController)
router.delete("/notification-setting/:notificationSettingId", deleteNotificationSettingController)
router.get("/consultation-history", tokenVerifier, getConsultationController)
router.post("/subscribe-plan", tokenVerifier, subscribePlanController)
router.get("/filter-popular",tokenVerifier,  getFilterByPopularController)
router.get("/unanswered-posts",tokenVerifier,  getUnansweredPostController)
router.get("/id",tokenVerifier, searchCaregiverByIdController)
router.get("/subscription", tokenVerifier, getSubscriptionController)
router.put("/change-post-status/:postId", tokenVerifier, changePostStatusController)
router.put("/reschedule-booking", tokenVerifier, createBookingRescheduleController)
router.get("/points", tokenVerifier, getPointController)
router.get("/award-badge",tokenVerifier, awardBadgeController)
router.post("/send-payment-details", tokenVerifier, createPaystackPaymentController)
router.get("/doctors-list", tokenVerifier, getDoctorsListController)
router.get("/badge-history", tokenVerifier, getBadgeNotificationController)
router.put("/badge-history/:badgenotificationId", tokenVerifier, updateBadgeNotificationController)
router.get('/tags', getTagByParamController)
router.get('/top-doctor', tokenVerifier, getTopContributorController)
router.post('/comment-like', tokenVerifier, createPostCommentLikeController)
router.post('/comment-unlike', tokenVerifier, createPostCommentUnliikeController)
router.put("/change-plan", tokenVerifier, updatePlanDurationDetailController)
router.get("/current-sub-plan", tokenVerifier, getDoctorLatestSubscriptionController)
router.get("/show-payment", tokenVerifier, getPaymentController)
router.post("/send-chat-request", tokenVerifier, sendChatRequestController)
router.post("/create-chat-rooms", tokenVerifier, createChatRoomController)
router.get("/chat-request", tokenVerifier, getChatRequestController)

module.exports = router